package main

import (
	"fmt"
	"unsafe"
)

type Person struct {
	A int8 // 1
	B int  // 8
	C int8 // 1
	D int  // 8
	E int8 // 1
} // 19

type Person2 struct {
	A int8 // 1
	E int8 // 1
	C int8 // 1
	B int  // 8
	D int  // 8
} // 19

func main() {
	person := Person{1, 2, 3, 4, 5}
	person2 := Person2{1, 2, 3, 4, 5}
	fmt.Println(unsafe.Sizeof(person))
	fmt.Println(unsafe.Sizeof(person2)) //24바이트로 줄어듬
	//8바이트보다 작은 필드는 8바이트 크기(단위)를 고려해서 몰아서 배치하자
	//메모리 용량이 충분한 데스크톱 애플리케이션이라면 패딩으로 인한
	//메모리 낭비를 크게 걱정하지 않아도 된다.
	//메모리 공간이 매우 작은 임베디드 하드웨어에서 돌아가는 프로그램이라면 패딩을 고려

	//구조체의 역할
	/*
		객체 간 결합도(객체 간 의존관계)는 낮추고 연관있는 데이터 간 응집도를 올리는 방향
		결합도(의존성)은 낮게 응집도는 높게
		low coupling, high cohesion

		함수는 관련 코드 블록을 묶어서 응집도를 높이고 재상용성을 증가시킵니다.
		배열은 같은 타입의 데이터들을 묶어서 응집도를 높입니다.
		구조체는 관련된 데이터들을 묶어서 응집도를 높이고 재사용성을 증가시킵니다.

		결합도는 모듈간 상호 의존 관계를 형성해서 서로 강하게 결합되어 있는 정도를
		나타내는 용어로 의존성이라고 말하기도 한다
		응집도는 모듈의 완성도를 말하는 것으로 모듈 내부의 모든 기능이 단일 목적에 충실하게
		모여 있는지를 나타내는 용어이다
	*/

}
